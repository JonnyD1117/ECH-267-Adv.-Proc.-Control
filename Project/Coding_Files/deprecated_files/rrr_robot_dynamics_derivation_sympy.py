# -*- coding: utf-8 -*-
"""RRR Robot Dynamics Derivation SymPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZEcl2I8PePodAgWjrV1NnqzjNCIUweK
"""

!pip install sympy

from sympy import symbols
from sympy import *
from sympy.physics.vector import dynamicsymbols
# Import Sympy Symbolic Math Library 

# Initialize Pretty Printing 
init_printing()

# Declare ALL Symbolic Variables using SymPy
q1, q2, q3, m1, m2, m3, L1, L2, L3, g, I1, I2, I3,t, Tau1, Tau2, Tau3 = symbols('q1 q2 q3 m1 m2 m3 L1 L2 L3 g I1 I2 I3 t Tau1 Tau2 Tau3')

# Create Generalized Coordinates (functions of time)
q1 = dynamicsymbols('q1')
q2 = dynamicsymbols('q2')
q3 = dynamicsymbols('q3')

# Create Generalized Velocities
q1_dot = diff(q1, Symbol('t'))
q2_dot = diff(q2, Symbol('t'))
q3_dot = diff(q3, Symbol('t'))

# Create Generalized Accelerations
q1_ddot = diff(q1_dot, Symbol('t'))
q2_ddot = diff(q2_dot, Symbol('t'))
q3_ddot = diff(q3_dot, Symbol('t'))

# Use Geometry to define future Kinematic Calculations
x1 = 0
x2  =.5*L2*cos(q1)
x3 = L2*cos(q1) + .5*L3*cos(q2)

y1 = L1
y2 = L1 + .5*L2*sin(q1)
y3 = L1 + L2*sin(q1) + .5*L3*sin(q2)

x1_dot = diff(x1, Symbol('t'))
x2_dot = diff(x2, Symbol('t'))
x3_dot = diff(x3, Symbol('t'))
y1_dot = diff(y1, Symbol('t'))
y2_dot = diff(y2, Symbol('t'))
y3_dot = diff(y3, Symbol('t'))


v1_sqr = x1_dot**2 + y1_dot**2
v2_sqr = x2_dot**2 + y2_dot**2
v3_sqr = x3_dot**2 + y3_dot**2

# Define Variables for Constructing Lagrange Equations
# Potential Energy
U1 = m1*g*y1
U2 = m2*g*y2
U3 = m3*g*y3

U = U1 + U2 + U3

# Kinetic Energy
K1 = .5*m1*v1_sqr + .5*I1*(q1_dot)**2
K2 = .5*m2*v2_sqr + .5*I2*(q2_dot)**2
K3 = .5*m3*v3_sqr + .5*I3*(q3_dot)**2

T = K1 + K2 + K3

# Apply Differentiation for Lagrange EOM
dU_dq1 = diff(U, q1)
dU_dq2 = diff(U, q2)
dU_dq3 = diff(U, q3)

dT_dq1 = diff(T, q1)
dT_dq2 = diff(T, q2)
dT_dq3 = diff(T, q3)

dT_d_q1_dot = diff(T, q1_dot)
dT_d_q2_dot = diff(T, q2_dot)
dT_d_q3_dot = diff(T, q3_dot)

dt_T_q1_dot = diff(dT_d_q1_dot, t)
dt_T_q2_dot = diff(dT_d_q2_dot, t)
dt_T_q3_dot = diff(dT_d_q3_dot, t)


# Define Lagrange Equation (Left-Hand-Side)
eqn1_lhs = simplify(dt_T_q1_dot - dT_dq1 + dU_dq1)
eqn2_lhs = simplify(dt_T_q2_dot - dT_dq2 + dU_dq2)
eqn3_lhs = simplify(dt_T_q3_dot - dT_dq3 + dU_dq3)


# Complete Lagrange EOM 
# eqn1 = Eq(eqn1_lhs, Tau1)
# eqn2 = Eq(eqn2_lhs, Tau2)
# eqn3 = Eq(eqn3_lhs, Tau3)

"""# Obtain Latex Versions of Equations"""

eqn1 = simplify(dt_T_q1_dot - dT_dq1 + dU_dq1)
eqn1

# latex(eqn1)

latex(eqn1)

eqn2 = simplify(dt_T_q2_dot - dT_dq2 + dU_dq2)
eqn2

latex(eqn2)

eqn3 = simplify(dt_T_q3_dot - dT_dq3 + dU_dq3)
eqn3

"""# Something Different IDK"""

q2_ddot = diff(q2_dot, Symbol('t'))


t2 = collect(eqn1,q2_ddot, exact=True, evaluate=False)
t2[q2_ddot]

t3 = collect(eqn1,(q2_dot)**2, exact=True, evaluate=False)
t3[q2_dot**2]

eqn2 = Eq(dt_T_q2_dot - dT_dq2 + dU_dq2, Tau2)
eqn2

latex(eqn2)

q1_ddot = diff(q1_dot, Symbol('t'))

eqn2 = simplify(dt_T_q2_dot - dT_dq2 + dU_dq2)
eqn2

latex(eqn2)


# t1_2 = collect(eqn2, q2_ddot, exact=True, evaluate=False)
# t1_2[q2_ddot]

eqn3 = Eq(dt_T_q3_dot - dT_dq3 + dU_dq3, Tau3)
eqn3


eqn3 = simplify(eqn3)

latex(eqn3)

Tau1 = I1*q1_dot_dot + 0.25*L2**2*m2*q1_dot_dot + 1.0*L2**2*m3*q1_dot_dot + 0.5*L2*L3*m3*sin(q1(t) - q2(t))*q1_dot**2 + 0.5*L2*L3*m3*cos(q1(t) - q2(t))*q1_dot_dot)
Tau2 = I2*q2_dot_dot - 0.5*m3*(-1.0*L3*(-L2*sin(q1(t))*q1_dot - 0.5*L3*sin(q2(t))*q2_dot)*cos(q2(t))*q2_dot - 1.0*L3*(L2*cos(q1(t))*q1_dot + 0.5*L3*cos(q2(t))*q2_dot)*sin(q2(t))*q2_dot) + 0.5*m3*(-1.0*L3*(-L2*sin(q1(t))*q1_dot - 0.5*L3*sin(q2(t))*q2_dot)*cos(q2(t))*q2_dot - 1.0*L3*(L2*cos(q1(t))*q1_dot + 0.5*L3*cos(q2(t))*q2_dot)*sin(q2(t))*q2_dot + 1.0*L3*(-L2*sin(q1(t))*q1_dot**2 + L2*cos(q1(t))*q1_dot_dot - 0.5*L3*sin(q2(t))*q2_dot**2 + 0.5*L3*cos(q2(t))*q2_dot_dot)*cos(q2(t)) - 1.0*L3*(-L2*sin(q1(t))*q1_dot_dot - L2*cos(q1(t))*q1_dot**2 - 0.5*L3*sin(q2(t))*q2_dot_dot - 0.5*L3*cos(q2(t))*q2_dot**2)*sin(q2(t)))
Tau3 = I3*q3_dot_dot

"""# Bullshit"""

q3_ddot = diff(q3_dot, Symbol('t'))


M = Matrix([[(I1+.25*L2**2*m2+L2**2*m3), (.5*L2*L3*m3*cos(q1-q2)), (0)  ],[(.5*L2*L3*m3*cos(q1-q2)), (I2+.25*L3**2*m3),(0)],[0,0, I3]])

latex(M)

V_q_q_dot = Matrix([[.5*L2*L3*m3*sin(q1-q2)*(q2_dot)**2],[-.5*L2*L3*m3*sin(q1-q2)*(q1_dot)**2],[0]])
latex(V_q_q_dot)

K_theta = Matrix([[.5*L2*g*m2*cos(q1)+L2*g*m3*cos(q1)],[.5*L3*m3*cos(q2)],[0]])
latex(K_theta)